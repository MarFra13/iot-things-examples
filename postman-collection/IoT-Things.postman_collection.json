{
	"info": {
		"name": "IoT-Things",
		"_postman_id": "9c473343-2144-0c11-82ea-01894b175e4f",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "messages",
			"item": [
				{
					"name": "Send a message TO a Thing",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "some random body"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/inbox/messages/randomMessageSubject",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"inbox",
								"messages",
								"randomMessageSubject"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send a message TO a Feature",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"some\":\"json\"}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features/someFeature/inbox/messages/someMessageSubject",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features",
								"someFeature",
								"inbox",
								"messages",
								"someMessageSubject"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send a message FROM a Thing",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "some random body"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/outbox/messages/randomMessageSubject",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"outbox",
								"messages",
								"randomMessageSubject"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send a message FROM a Feature",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"some\":\"json\"}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features/someFeature/outbox/messages/someMessageSubject",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features",
								"someFeature",
								"outbox",
								"messages",
								"someMessageSubject"
							]
						}
					},
					"response": []
				},
				{
					"name": "Claim a Thing",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "you shall be mine!"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/inbox/claim",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"inbox",
								"claim"
							]
						}
					},
					"response": []
				},
				{
					"name": "Claim a Thing with timeout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "you shall be mine!"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/inbox/claim?timeout=10",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"inbox",
								"claim"
							],
							"query": [
								{
									"key": "timeout",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "policies",
			"item": [
				{
					"name": "conditional",
					"description": "Provides examples for the usage of Conditional Headers on the Policies API.",
					"item": [
						{
							"name": "Create a Policy only if it does not yet exist",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "If-None-Match",
										"value": "*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entries\": {\r\n    \"ALL\": {\r\n      \"subjects\": {\r\n        \"${request.subjectId}\": {\r\n          \"type\": \"my-user-id\"\r\n        }\r\n      },\r\n      \"resources\": {\r\n        \"policy:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        },\r\n        \"thing:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        },\r\n        \"message:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:conditional-policy",
									"host": [
										"{{base.protocol}}{{base.url}}"
									],
									"path": [
										"api",
										"2",
										"policies",
										"{{namespace}}:conditional-policy"
									]
								},
								"description": "If the Policy already exists, status 412 will be returned."
							},
							"response": []
						},
						{
							"name": "Update a Policy only if it already exists",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "If-Match",
										"value": "*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entries\": {\r\n    \"ALL\": {\r\n      \"subjects\": {\r\n        \"${request.subjectId}\": {\r\n          \"type\": \"my-user-id\"\r\n        }\r\n      },\r\n      \"resources\": {\r\n        \"policy:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        },\r\n        \"thing:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        },\r\n        \"message:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:conditional-policy",
									"host": [
										"{{base.protocol}}{{base.url}}"
									],
									"path": [
										"api",
										"2",
										"policies",
										"{{namespace}}:conditional-policy"
									]
								},
								"description": "If the Policy does not yet exist, status 412 will be returned."
							},
							"response": []
						},
						{
							"name": "Update a Policy only if it did not change",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "If-Match",
										"value": "\"rev:2\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entries\": {\r\n    \"ALL\": {\r\n      \"subjects\": {\r\n        \"${request.subjectId}\": {\r\n          \"type\": \"my-user-id\"\r\n        }\r\n      },\r\n      \"resources\": {\r\n        \"policy:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        },\r\n        \"thing:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        },\r\n        \"message:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:conditional-policy",
									"host": [
										"{{base.protocol}}{{base.url}}"
									],
									"path": [
										"api",
										"2",
										"policies",
										"{{namespace}}:conditional-policy"
									]
								},
								"description": "Optimistic locking: If the current ETag of the Policy is not \"rev:2\" (i.e. the Policy does no longer have revision 2), status 412 is returned."
							},
							"response": []
						},
						{
							"name": "Retrieve a Policy only if it changed",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "If-None-Match",
										"value": "\"rev:2\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:conditional-policy",
									"host": [
										"{{base.protocol}}{{base.url}}"
									],
									"path": [
										"api",
										"2",
										"policies",
										"{{namespace}}:conditional-policy"
									]
								},
								"description": "If the current ETag of the Policy is still \"rev:2\" (i.e. the Policy has still revision 2), status 304 is returned."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create or update a Policy",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"entries\": {\r\n    \"ALL\": {\r\n      \"subjects\": {\r\n        \"iot-permissions:test\": {\r\n          \"type\": \"iot-permissions-sid\"\r\n        }\r\n      },\r\n      \"resources\": {\r\n        \"policy:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        },\r\n        \"thing:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        },\r\n        \"message:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:myPolicy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify the entries of a specific Policy",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"ALL\": {\r\n\t  \"subjects\": {\r\n\t    \"iot-permissions:test\": {\r\n\t      \"type\": \"iot-permissions-sid\"\r\n\t    }\r\n\t  },\r\n\t  \"resources\": {\r\n\t    \"policy:/\": {\r\n\t      \"grant\": [\r\n\t        \"READ\",\r\n\t        \"WRITE\"\r\n\t      ],\r\n\t      \"revoke\": []\r\n\t    },\r\n\t    \"thing:/\": {\r\n\t      \"grant\": [\r\n\t        \"READ\",\r\n\t        \"WRITE\"\r\n\t      ],\r\n\t      \"revoke\": []\r\n\t    },\r\n\t    \"message:/\": {\r\n\t      \"grant\": [\r\n\t        \"READ\",\r\n\t        \"WRITE\"\r\n\t      ],\r\n\t      \"revoke\": []\r\n\t    }\r\n\t  }\r\n\t}\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:myPolicy",
								"entries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create or modify one Policy entry of a Policy for a specific label",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subjects\": {\r\n    \"iot-permissions:restricted\": {\r\n      \"type\": \"iot-permissions-sid\"\r\n    }\r\n  },\r\n  \"resources\": {\r\n    \"policy:/\": {\r\n      \"grant\": [],\r\n      \"revoke\": []\r\n    },\r\n    \"thing:/\": {\r\n      \"grant\": [\r\n        \"READ\"\r\n      ],\r\n      \"revoke\": []\r\n    },\r\n    \"thing:/attributes\": {\r\n      \"grant\": [\r\n        \"READ\"\r\n      ],\r\n      \"revoke\": []\r\n    },\r\n    \"thing:/attributes/VIN\": {\r\n      \"grant\": [],\r\n      \"revoke\": [\r\n      \t\"WRITE\"\r\n      ]\r\n    },\r\n    \"thing:/features/EnvironmentScanner/properties/temperature\": {\r\n      \"grant\": [\r\n        \"WRITE\"\r\n      ],\r\n      \"revoke\": []\r\n    },\r\n    \"message:/\": {\r\n      \"grant\": [],\r\n      \"revoke\": []\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:myPolicy",
								"entries",
								"RESTRICTED"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create or modify all Subjects of a Policy Entry",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"iot-permissions:restricted\": {\r\n\t  \"type\": \"iot-permissions-sid\"\r\n\t}\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/subjects",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:myPolicy",
								"entries",
								"RESTRICTED",
								"subjects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create or modify one specific Subject of a Policy entry",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"type\": \"iot-permissions-sid\"\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/subjects/iot-permissions:restricted",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:myPolicy",
								"entries",
								"RESTRICTED",
								"subjects",
								"iot-permissions:restricted"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create or modify all Resources of a Policy Entry",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"policy:/\": {\r\n\t  \"grant\": [],\r\n\t  \"revoke\": []\r\n\t},\r\n\t\"thing:/\": {\r\n\t  \"grant\": [\r\n\t    \"READ\"\r\n\t  ],\r\n\t  \"revoke\": []\r\n\t},\r\n\t\"thing:/attributes\": {\r\n\t  \"grant\": [\r\n\t    \"READ\"\r\n\t  ],\r\n\t  \"revoke\": []\r\n\t},\r\n\t\"thing:/attributes/VIN\": {\r\n\t  \"grant\": [],\r\n\t  \"revoke\": [\r\n\t  \t\"WRITE\"\r\n\t  ]\r\n\t},\r\n\t\"thing:/features/EnvironmentScanner/properties/temperature\": {\r\n\t  \"grant\": [\r\n\t    \"WRITE\"\r\n\t  ],\r\n\t  \"revoke\": []\r\n\t},\r\n\t\"message:/\": {\r\n\t  \"grant\": [],\r\n\t  \"revoke\": []\r\n\t}\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/resources",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:myPolicy",
								"entries",
								"RESTRICTED",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create or modify one specific Resource of a Policy entry",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"grant\": [\r\n\t\t\"READ\"\r\n\t],\r\n\t\"revoke\": []\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/resources/thing:/attributes",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:myPolicy",
								"entries",
								"RESTRICTED",
								"resources",
								"thing:",
								"attributes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve a specific Policy",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:myPolicy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve the entries of a specific Policy",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:myPolicy",
								"entries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve one Policy entry of a Policy for a specific label",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:myPolicy",
								"entries",
								"RESTRICTED"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve all Subjects of a Policy entry",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/subjects",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:myPolicy",
								"entries",
								"RESTRICTED",
								"subjects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve one specific Subject of a Policy entry",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/subjects/iot-permissions:restricted",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:myPolicy",
								"entries",
								"RESTRICTED",
								"subjects",
								"iot-permissions:restricted"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve all Resources of a Policy entry",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/resources",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:myPolicy",
								"entries",
								"RESTRICTED",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve one specific Resource of a Policy entry",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/resources/thing:/attributes",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:myPolicy",
								"entries",
								"RESTRICTED",
								"resources",
								"thing:",
								"attributes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a specific Policy",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:myPolicy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete one Policy entry of a Policy for a specific label",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:myPolicy",
								"entries",
								"RESTRICTED"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete one specific Subject of a Policy entry",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/subjects/iot-permissions:restricted",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:myPolicy",
								"entries",
								"RESTRICTED",
								"subjects",
								"iot-permissions:restricted"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete one Resource of a Policy entry",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/resources/thing:/attributes",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:myPolicy",
								"entries",
								"RESTRICTED",
								"resources",
								"thing:",
								"attributes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "relations",
			"item": [
				{
					"name": "Create: A Relation ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"source\": \"<source>\",\r\n  \"target\": \"<target>\",\r\n  \"attributes\": {}\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/relations",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"relations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create: A Relation with complex attributes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"source\": \"<source>\",\r\n  \"target\": \"<target>\",\r\n  \"attributes\": {\r\n    \"simpleString\": \"simple\",\r\n    \"simpleInt\": 42,\r\n    \"nested\": {\r\n      \"nestedString\": \"nested\",\r\n      \"nestedBoolean\": false,\r\n      \"subnested\" : {\r\n        \"list\": [\r\n          1,2,3,5,8\r\n        ],\r\n        \"some\": \"value\"\r\n      }\r\n    },\r\n    \"toplist\": [\r\n      \"IOT\",\"BUM\",\"FOO\"\r\n    ],\r\n    \"toplistWithObjects\": [\r\n      {\r\n        \"thevalue\": 1,\r\n        \"nested\": {\r\n          \"bum\": \"lux\",\r\n          \"foo\": 3\r\n        }\r\n      },\r\n      {\r\n        \"thevalue\": 2,\r\n        \"nested\": {\r\n          \"bum\": \"ta\",\r\n          \"foo\": 6\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/relations",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"relations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create: A Relation with given ID",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"source\": \"<source>\",\r\n  \"target\": \"<target>\",\r\n  \"attributes\": {\r\n      parent:{\r\n          child:{\r\n              attribute:\"cool\"\r\n          }\r\n      }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"relations",
								"{{namespace}}:MyRelation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create: A new Attribute at an existing Relation",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"<the new Attribute>\"\n"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation/attributes/<new-attribute>",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"relations",
								"{{namespace}}:MyRelation",
								"attributes",
								"<new-attribute>"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update: A Relation ",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"source\":\"<source>\",\n  \"target\":\"<target>\",\n  \"attributes\": {\n    \"foo\":\"bar\",\n    \"baz\": 42\n  }\n}\n"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"relations",
								"{{namespace}}:MyRelation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update: A Attribute at an existing Relation",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"<the new value for the Attribute>\""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation/attributes/<attribute>",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"relations",
								"{{namespace}}:MyRelation",
								"attributes",
								"<attribute>"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete: One Relation ",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"relations",
								"{{namespace}}:MyRelation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete: Attribute of a Relation",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation/attributes/<attribute>",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"relations",
								"{{namespace}}:MyRelation",
								"attributes",
								"<attribute>"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: One Relation",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"relations",
								"{{namespace}}:MyRelation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: One Relation (relationId,source,target)",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation?fields=relationId,source,target",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"relations",
								"{{namespace}}:MyRelation"
							],
							"query": [
								{
									"key": "fields",
									"value": "relationId,source,target"
								}
							]
						},
						"description": "Queries a Relation with the \"relationId\",\"source\" and \"target\" field selector."
					},
					"response": []
				},
				{
					"name": "Query: A List of Relations",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/relations?ids={{namespace}}:MyRelation,{{namespace}}:MyRelation2>",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"relations"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{namespace}}:MyRelation,{{namespace}}:MyRelation2>"
								}
							]
						},
						"description": "Queries a list of Relations"
					},
					"response": []
				},
				{
					"name": "Query: A List of Relations (relationId,source,target)",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/relations?ids={{namespace}}:MyRelation,{{namespace}}:MyRelation2>&fields=relationId,source,target",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"relations"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{namespace}}:MyRelation,{{namespace}}:MyRelation2>"
								},
								{
									"key": "fields",
									"value": "relationId,source,target"
								}
							]
						},
						"description": "Queries a list of Relations with the \"relationId\",\"source\" and \"target\" field selector"
					},
					"response": []
				},
				{
					"name": "Query: Attributes of one Relation",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation/attributes",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"relations",
								"{{namespace}}:MyRelation",
								"attributes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: Attributes of one Relation with field selector: only partial structures",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation?fields=attributes(<attributeObject>(<attribute1>,<attribute2>))",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"relations",
								"{{namespace}}:MyRelation"
							],
							"query": [
								{
									"key": "fields",
									"value": "attributes(<attributeObject>(<attribute1>,<attribute2>))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: Attributes of one Relation with field selector: only partial structures of a list of objects",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation?fields=attributes(<topAttributeObject>(<nestedAttributeObject>/<attribute>))",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"relations",
								"{{namespace}}:MyRelation"
							],
							"query": [
								{
									"key": "fields",
									"value": "attributes(<topAttributeObject>(<nestedAttributeObject>/<attribute>))"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "things",
			"item": [
				{
					"name": "conditional",
					"description": "Provides examples for the usage of Conditional Headers on the Things API.",
					"item": [
						{
							"name": "Create: A Thing only if it does not yet exist",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "If-None-Match",
										"value": "*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attributes\": {\n    \"foo\":\"bar\",\n    \"baz\": 42\n  }\n}\n"
								},
								"url": {
									"raw": "{{base.protocol}}{{base.url}}/api/2/things/{{namespace}}:conditional-test",
									"host": [
										"{{base.protocol}}{{base.url}}"
									],
									"path": [
										"api",
										"2",
										"things",
										"{{namespace}}:conditional-test"
									]
								},
								"description": "If the Thing already exists, status 412 will be returned."
							},
							"response": []
						},
						{
							"name": "Update: A Thing only if it already exists",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "If-Match",
										"value": "*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attributes\": {\n    \"foo\":\"bar\",\n    \"baz\": 42\n  }\n}\n"
								},
								"url": {
									"raw": "{{base.protocol}}{{base.url}}/api/2/things/{{namespace}}:conditional-test",
									"host": [
										"{{base.protocol}}{{base.url}}"
									],
									"path": [
										"api",
										"2",
										"things",
										"{{namespace}}:conditional-test"
									]
								},
								"description": "If the Thing does not yet exist, status 412 will be returned."
							},
							"response": []
						},
						{
							"name": "Update: A Thing only if it did not change",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "If-Match",
										"value": "\"rev:2\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attributes\": {\n    \"foo\":\"bar\",\n    \"baz\": 42\n  }\n}\n"
								},
								"url": {
									"raw": "{{base.protocol}}{{base.url}}/api/2/things/{{namespace}}:conditional-test",
									"host": [
										"{{base.protocol}}{{base.url}}"
									],
									"path": [
										"api",
										"2",
										"things",
										"{{namespace}}:conditional-test"
									]
								},
								"description": "Optimistic locking: If the current ETag of the Thing is not \"rev:2\" (i.e. the Thing does no longer have revision 2), status 412 is returned."
							},
							"response": []
						},
						{
							"name": "Retrieve: A Thing only if it changed",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "If-None-Match",
										"value": "\"rev:2\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attributes\": {\n    \"foo\":\"bar\",\n    \"baz\": 42\n  }\n}\n"
								},
								"url": {
									"raw": "{{base.protocol}}{{base.url}}/api/2/things/{{namespace}}:conditional-test",
									"host": [
										"{{base.protocol}}{{base.url}}"
									],
									"path": [
										"api",
										"2",
										"things",
										"{{namespace}}:conditional-test"
									]
								},
								"description": "If the current ETag of the Thing is still \"rev:2\" (i.e. the Thing has still revision 2), status 304 is returned."
							},
							"response": []
						},
						{
							"name": "Create: Feature of a Thing only if it does not yet exist",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "If-None-Match",
										"value": "*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"definition\": [\n\t    \"{{namespace}}:ABC:1.0.0\"\n\t],\n    \"properties\":{\n        \"foo\":\"bar\"\n    }\n}"
								},
								"url": {
									"raw": "{{base.protocol}}{{base.url}}/api/2/things/{{namespace}}:conditional-test/features/abc",
									"host": [
										"{{base.protocol}}{{base.url}}"
									],
									"path": [
										"api",
										"2",
										"things",
										"{{namespace}}:conditional-test",
										"features",
										"abc"
									]
								},
								"description": "If the Feature already exists, status 412 will be returned."
							},
							"response": []
						},
						{
							"name": "Update: Feature of a Thing only if it already exists",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "If-Match",
										"value": "*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"definition\": [\n\t    \"{{namespace}}:ABC:1.0.0\"\n\t],\n    \"properties\":{\n        \"foo\":\"bar\"\n    }\n}"
								},
								"url": {
									"raw": "{{base.protocol}}{{base.url}}/api/2/things/{{namespace}}:conditional-test/features/abc",
									"host": [
										"{{base.protocol}}{{base.url}}"
									],
									"path": [
										"api",
										"2",
										"things",
										"{{namespace}}:conditional-test",
										"features",
										"abc"
									]
								},
								"description": "If the Feature does not yet exist, status 412 will be returned."
							},
							"response": []
						},
						{
							"name": "Update: Feature of a Thing only if it did not change",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "If-Match",
										"value": "\"hash:a9306242\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"definition\": [\n\t    \"{{namespace}}:ABC:1.0.0\"\n\t],\n    \"properties\":{\n        \"foo\":\"bar\"\n    }\n}"
								},
								"url": {
									"raw": "{{base.protocol}}{{base.url}}/api/2/things/{{namespace}}:conditional-test/features/abc",
									"host": [
										"{{base.protocol}}{{base.url}}"
									],
									"path": [
										"api",
										"2",
										"things",
										"{{namespace}}:conditional-test",
										"features",
										"abc"
									]
								},
								"description": "Optimistic locking: If the current ETag of the Feature is no longer \"hash:2838520386\", status 412 is returned."
							},
							"response": []
						},
						{
							"name": "Retrieve: Feature of a Thing only if it changed",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "If-None-Match",
										"value": "\"hash:a9306242\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"definition\": [\n\t    \"{{namespace}}:ABC:1.0.0\"\n\t],\n    \"properties\":{\n        \"foo\":\"bar\"\n    }\n}"
								},
								"url": {
									"raw": "{{base.protocol}}{{base.url}}/api/2/things/{{namespace}}:conditional-test/features/abc",
									"host": [
										"{{base.protocol}}{{base.url}}"
									],
									"path": [
										"api",
										"2",
										"things",
										"{{namespace}}:conditional-test",
										"features",
										"abc"
									]
								},
								"description": "If the current ETag of the Feature is still \"hash:2838520386\", status 304 is returned."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create: A Thing",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attributes\": {\n    \"manufacturer\": \"ACME\",\n    \"make\": \"Fancy Fab Car\",\n    \"model\": \"Environmental FourWheeler 4711\",\n    \"VIN\": \"0815666337\"\n  },\n  \"features\": {\n    \"Vehicle\": {\n      \"properties\": {\n        \"configuration\": {\n          \"transmission\": {\n            \"type\": \"manual\",\n            \"gears\": 7\n          }\n        },\n        \"status\": {\n          \"running\": true,\n          \"speed\": 90,\n          \"gear\": 5\n        },\n        \"fault\": {\n          \"flatTyre\": false\n        }\n      }\n    },\n    \"EnvironmentScanner\": {\n      \"definition\": [\n\t    \"{{namespace}}:Car:1.0.0\"\n\t  ],\n      \"properties\": {\n          \"temperature\": 20.8,\n          \"humidity\": 73,\n          \"barometricPressure\": 970.7,\n          \"location\": {\n            \"longitude\": 47.682170,\n            \"latitude\": 9.386372\n          },\n          \"altitude\": 399\n      }\n    }\n  }\n}\n"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create: An empty Thing",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create: A Thing with complex attributes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attributes\": {\n    \"simpleString\": \"simple\",\n    \"simpleInt\": 42,\n    \"nested\": {\n      \"nestedString\": \"nested\",\n      \"nestedBoolean\": false,\n      \"subnested\" : {\n        \"list\": [\n          1,2,3,5,8\n        ],\n        \"some\": \"value\"\n      }\n    },\n    \"toplist\": [\n      \"IOT\",\"BUM\",\"FOO\"\n    ],\n    \"toplistWithObjects\": [\n      {\n        \"thevalue\": 1,\n        \"nested\": {\n          \"bum\": \"lux\",\n          \"foo\": 3\n        }\n      },\n      {\n        \"thevalue\": 2,\n        \"nested\": {\n          \"bum\": \"ta\",\n          \"foo\": 6\n        }\n      }\n    ]\n  },\n  \"features\": {\n  }\n}\n"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create: A Thing with given ID",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attributes\": {\n    \"manufacturer\": \"ACME\",\n    \"make\": \"Fancy Fab Car\",\n    \"model\": \"Environmental FourWheeler 4711\",\n    \"VIN\": \"0815666337\"\n  },\n  \"features\": {\n    \"Vehicle\": {\n      \"properties\": {\n        \"configuration\": {\n          \"transmission\": {\n            \"type\": \"manual\",\n            \"gears\": 7\n          }\n        },\n        \"status\": {\n          \"running\": true,\n          \"speed\": 90,\n          \"gear\": 5\n        },\n        \"fault\": {\n          \"flatTyre\": false\n        }\n      }\n    },\n    \"EnvironmentScanner\": {\n      \"definition\": [\n\t    \"{{namespace}}:Car:1.0.0\"\n\t  ],\n      \"properties\": {\n          \"temperature\": 20.8,\n          \"humidity\": 73,\n          \"barometricPressure\": 970.7,\n          \"location\": {\n            \"longitude\": 47.682170,\n            \"latitude\": 9.386372\n          },\n          \"altitude\": 399\n      }\n    }\n  }\n}\n"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create: A new Attribute at an existing Thing",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"someValue\"\n"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/attributes/new",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"attributes",
								"new"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create: A new Property of a Thing's Feature",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "1400"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features/EnvironmentScanner/properties/brightness",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features",
								"EnvironmentScanner",
								"properties",
								"brightness"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update: A Thing",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attributes\": {\n    \"foo\":\"bar\",\n    \"baz\": 42\n  }\n}\n"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update: An existing Attribute at an existing Thing",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "23"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/attributes/new",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"attributes",
								"new"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update: ACL of a Thing",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ed420ff0-b1c96661e4-9070-3863bbc77d82\": {\n    \"READ\": true,\n    \"WRITE\": true,\n    \"ADMINISTRATE\": true\n  },\n  \"edca04a0-b1c96661e4-9070-3863bbc77d82\": {\n    \"READ\": true,\n    \"WRITE\": false,\n    \"ADMINISTRATE\": false\n  }\n}\n"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/acl",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"acl"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update: All  Features of a Thing",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"abc\":{\n        \"properties\":{\n            \"foo\":\"bar\"\n        }\n    },\n  \"test\":{\n        \"properties\":{\n            \"foo2\":\"bar2\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update: Feature of a Thing",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"definition\": [\n\t    \"{{namespace}}:ABC:1.0.0\"\n\t],\n    \"properties\":{\n        \"foo\":\"bar\"\n    }\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features/abc",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features",
								"abc"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update: Definition of a Thing's Feature",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t\"{{namespace}}:Car:1.0.0\"\t\n]"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features/EnvironmentScanner/definition",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features",
								"EnvironmentScanner",
								"definition"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update: All Properties of a Thing's Feature copy",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"temperature\": 20.8,\n  \"humidity\": 73,\n  \"barometricPressure\": 970.7,\n  \"location\": {\n    \"longitude\": 47.682170,\n    \"latitude\": 9.386372\n  },\n  \"altitude\": 399\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features/EnvironmentScanner/properties",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features",
								"EnvironmentScanner",
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update: One Property of a Thing's Feature",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"longitude\": 49.008085,\n  \"latitude\": 8.403756\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features/EnvironmentScanner/properties/location",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features",
								"EnvironmentScanner",
								"properties",
								"location"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: A List of Things",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things?ids={{namespace}}:fancy-car,{{namespace}}:fancy-car1,{{namespace}}:fancy-car2",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{namespace}}:fancy-car,{{namespace}}:fancy-car1,{{namespace}}:fancy-car2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: A List of Things (thingId,acl)",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things?ids={{namespace}}:fancy-car,{{namespace}}:fancy-car1,{{namespace}}:fancy-car2&fields=thingId,acl",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{namespace}}:fancy-car,{{namespace}}:fancy-car1,{{namespace}}:fancy-car2"
								},
								{
									"key": "fields",
									"value": "thingId,acl"
								}
							]
						},
						"description": "Queries a list of Things with the \"thingId\" and \"acl\" field selector"
					},
					"response": []
				},
				{
					"name": "Query: One Thing",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: One Thing (thingId,acl)",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car?fields=thingId,acl",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car"
							],
							"query": [
								{
									"key": "fields",
									"value": "thingId,acl"
								}
							]
						},
						"description": "Queries a Thing with the \"thingId\" and \"acl\" field selector."
					},
					"response": []
				},
				{
					"name": "Query: Attributes of one Thing",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/attributes",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"attributes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: Attributes of one Thing: single attribute object",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/attributes/nested",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"attributes",
								"nested"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: Attributes of one Thing with field selector: only partial structures",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car?fields=attributes(nested(nestedString,nestedBoolean))",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car"
							],
							"query": [
								{
									"key": "fields",
									"value": "attributes(nested(nestedString,nestedBoolean))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: Attributes of one Thing with field selector: only partial structures of a list of objects",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car?fields=attributes(toplistWithObjects(nested/foo))",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car"
							],
							"query": [
								{
									"key": "fields",
									"value": "attributes(toplistWithObjects(nested/foo))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: ACL of a Thing",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/acl",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"acl"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: ACL Entry of a Thing",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: All Features of a Thing",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: Feature of a Thing ",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features/Vehicle",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features",
								"Vehicle"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: Definition of a Thing's Feature",
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features/EnvironmentScanner/definition",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features",
								"EnvironmentScanner",
								"definition"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: All Properties of a Thing's Feature copy",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features/EnvironmentScanner/properties",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features",
								"EnvironmentScanner",
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: One Property of a Thing's Feature",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features/EnvironmentScanner/properties/location",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features",
								"EnvironmentScanner",
								"properties",
								"location"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete: One Thing",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete: Attribute of a Thing",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/attributes/new",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"attributes",
								"new"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete: ACL Entry of a Thing",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/acl/ed420ff0-b1c96661e4-9070-3863bbc77d82",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"acl",
								"ed420ff0-b1c96661e4-9070-3863bbc77d82"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete: Features of a Thing",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete: Feature of a Thing",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features/Vehicle",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features",
								"Vehicle"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete: Definition of a Thing's Feature",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features/EnvironmentScanner/definition",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features",
								"EnvironmentScanner",
								"definition"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete: All Properties of a Thing's Feature copy",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features/EnvironmentScanner/properties",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features",
								"EnvironmentScanner",
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete: One Property of a Thing's Feature",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:fancy-car/features/EnvironmentScanner/properties/brightness",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"things",
								"{{namespace}}:fancy-car",
								"features",
								"EnvironmentScanner",
								"properties",
								"brightness"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "search-things",
			"item": [
				{
					"name": "(equals): A Thing with a given thingId",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/search/things?filter=eq(thingId,\"<thingId>\")",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"search",
								"things"
							],
							"query": [
								{
									"key": "filter",
									"value": "eq(thingId,\"<thingId>\")"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(not equals): All Things with not the given Attribute Value",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/search/things?filter=ne(attributes/<attribute>,<attributeValue>)",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"search",
								"things"
							],
							"query": [
								{
									"key": "filter",
									"value": "ne(attributes/<attribute>,<attributeValue>)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(greater than): All Things greater than the given Attribute Value",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/search/things?filter=gt(attributes/<attribute>,<attributeValue>)",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"search",
								"things"
							],
							"query": [
								{
									"key": "filter",
									"value": "gt(attributes/<attribute>,<attributeValue>)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(greater equals): All Things greater equals the given Attribute Value",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/search/things?filter=ge(attributes/<attribute>,<attributeValue>)",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"search",
								"things"
							],
							"query": [
								{
									"key": "filter",
									"value": "ge(attributes/<attribute>,<attributeValue>)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(less then): All Things less then the given Attribute Value",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/search/things?filter=lt(attributes/<attribute>,<attributeValue>)",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"search",
								"things"
							],
							"query": [
								{
									"key": "filter",
									"value": "lt(attributes/<attribute>,<attributeValue>)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(less equals): All Things less equals the given Attribute Value",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/search/things?filter=le(attributes/<attribute>,<attributeValue>)",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"search",
								"things"
							],
							"query": [
								{
									"key": "filter",
									"value": "le(attributes/<attribute>,<attributeValue>)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(in): List of Things with a List of  given thingIds",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/search/things?filter=in(thingId,\"<thingId>,<thingId2>,<thingId3>\")",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"search",
								"things"
							],
							"query": [
								{
									"key": "filter",
									"value": "in(thingId,\"<thingId>,<thingId2>,<thingId3>\")"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(like): A Thing with a partial given thingId",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/search/things?filter=like(thingId,\"<thingId>\")",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"search",
								"things"
							],
							"query": [
								{
									"key": "filter",
									"value": "like(thingId,\"<thingId>\")"
								}
							]
						},
						"description": "Starts with = \\*, \nEnds with = \\*, \nWildcard for one Char = ?,\nWildcard for many Chars = \\*"
					},
					"response": []
				},
				{
					"name": "(and): All Things with two given Attribute Values",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/search/things?filter=and(eq(attributes/<attribute>,<attributeValue>),eq(attributes/<attribute>,<attributeValue>))",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"search",
								"things"
							],
							"query": [
								{
									"key": "filter",
									"value": "and(eq(attributes/<attribute>,<attributeValue>),eq(attributes/<attribute>,<attributeValue>))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(or): All Things with one of the two given Attributes Values or both",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/search/things?filter=or(eq(attributes/<attribute>,<attributeValue>),eq(attributes/<attribute>,<attributeValue>))",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"search",
								"things"
							],
							"query": [
								{
									"key": "filter",
									"value": "or(eq(attributes/<attribute>,<attributeValue>),eq(attributes/<attribute>,<attributeValue>))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(not): All Things not greater than a given Attribute Values",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/search/things?filter=not(gt(attributes/<attribute>,<attributeValue>))",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"search",
								"things"
							],
							"query": [
								{
									"key": "filter",
									"value": "not(gt(attributes/<attribute>,<attributeValue>))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(sort): All Things with a higher or equal Attribute Value than the given  sorted descending",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/search/things?filter=ge(attributes/<sortAtt>,<attributeValue>)&option=sort(-attributes/<sortAtt>)",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"search",
								"things"
							],
							"query": [
								{
									"key": "filter",
									"value": "ge(attributes/<sortAtt>,<attributeValue>)"
								},
								{
									"key": "option",
									"value": "sort(-attributes/<sortAtt>)"
								}
							]
						},
						"description": "Sort ascending = +,\nSort descending = -,\nSort with two criterias: \nsort(+attributes/att1,-attributes/att2)"
					},
					"response": []
				},
				{
					"name": "(limit): All Things with a higher or equal Attribute Value than the given  and among these the second ten elements",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/search/things?filter=ge(attributes/<sortAtt>,<attributeValue>)&option=limit(10,10)",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"search",
								"things"
							],
							"query": [
								{
									"key": "filter",
									"value": "ge(attributes/<sortAtt>,<attributeValue>)"
								},
								{
									"key": "option",
									"value": "limit(10,10)"
								}
							]
						},
						"description": "maximum allowed count is 200"
					},
					"response": []
				},
				{
					"name": "(sort&limit): All Things with a higher or equal Attribute Value than the given  sorted descending  and among these the second ten elements",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/1/search/things?filter=ge(attributes/<sortAtt>,<attributeValue>)&option=sort(-attributes/<sortAtt>),limit(10,10)",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"1",
								"search",
								"things"
							],
							"query": [
								{
									"key": "filter",
									"value": "ge(attributes/<sortAtt>,<attributeValue>)"
								},
								{
									"key": "option",
									"value": "sort(-attributes/<sortAtt>),limit(10,10)"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "topologies-schema",
			"description": "/topology-schemas/{schemaId}",
			"item": [
				{
					"name": "Create/Update: A Policy for Topologies",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"entries\": {\r\n\t\t\"DEFAULT\": {\r\n\t\t\t\"subjects\": {\r\n\t\t\t\t\"${request.subjectId}\": {\r\n\t\t\t\t\t\"type\": \"iot-permissions-sid\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"resources\": {\r\n\t\t\t\t\"policy:/\": {\r\n\t\t\t\t\t\"grant\": [\r\n\t\t\t\t\t\t\"READ\",\r\n\t\t\t\t\t\t\"WRITE\"\r\n\t\t\t\t\t],\r\n\t\t\t\t\t\"revoke\": []\r\n\t\t\t\t},\r\n\t\t\t\t\"thing:/\": {\r\n\t\t\t\t\t\"grant\": [\r\n\t\t\t\t\t\t\"READ\",\r\n\t\t\t\t\t\t\"WRITE\"\r\n\t\t\t\t\t],\r\n\t\t\t\t\t\"revoke\": []\r\n\t\t\t\t},\r\n\t\t\t\t\"message:/\": {\r\n\t\t\t\t\t\"grant\": [\r\n\t\t\t\t\t\t\"READ\",\r\n\t\t\t\t\t\t\"WRITE\"\r\n\t\t\t\t\t],\r\n\t\t\t\t\t\"revoke\": []\r\n\t\t\t\t},\r\n\t\t\t\t\"topology:/\": {\r\n\t\t\t\t\t\"grant\": [\r\n\t\t\t\t\t\t\"READ\",\r\n\t\t\t\t\t\t\"WRITE\"\r\n\t\t\t\t\t],\r\n\t\t\t\t\t\"revoke\": []\r\n\t\t\t\t},\r\n\t\t\t\t\"topology-schema:/\": {\r\n\t\t\t\t\t\"grant\": [\r\n\t\t\t\t\t\t\"READ\",\r\n\t\t\t\t\t\t\"WRITE\"\r\n\t\t\t\t\t],\r\n\t\t\t\t\t\"revoke\": []\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:topologyPolicy",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"policies",
								"{{namespace}}:topologyPolicy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create/Update: An empty Schema",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"policyId\": \"{{namespace}}:topologyPolicy\"\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topology-schemas/{{namespace}}:campus-schema:1",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topology-schemas",
								"{{namespace}}:campus-schema:1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create/Update: A Schema's content",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "schema @expand(template: \"Topology\") { query: Ignored }\r\n\r\ntype Campus implements Topology {\r\n\tid: \t\t\tID!\r\n\tcampusName: \tString\r\n\tbuildings: \t\t[Building]\r\n\tcompanies:\t\t[Company]\r\n}\r\n\r\ntype Building implements Referenceable {\r\n\tid:\t\t\t\tID!\r\n\tbuildingName:\tString\r\n\trooms: \t\t\t[Room]\r\n}\r\n\r\ntype Room implements Referenceable {\r\n\tid:\t\t\tID!\r\n\troomName: \tString\r\n\tarea:\t\tFloat\r\n}\r\n\r\ntype Company {\r\n\tname:\t\tString\r\n\tunits:\t\t[Referenceable]\r\n}\r\n"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topology-schemas/{{namespace}}:campus-schema:1/content",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topology-schemas",
								"{{namespace}}:campus-schema:1",
								"content"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: A Schema",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topology-schemas/{{namespace}}:campus-schema:1",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topology-schemas",
								"{{namespace}}:campus-schema:1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: A Schema's content",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topology-schemas/{{namespace}}:campus-schema:1/content",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topology-schemas",
								"{{namespace}}:campus-schema:1",
								"content"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: A Schema (schemaId,_revision)",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topology-schemas/{{namespace}}:campus-schema:1?fields=schemaId,_revision",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topology-schemas",
								"{{namespace}}:campus-schema:1"
							],
							"query": [
								{
									"key": "fields",
									"value": "schemaId,_revision",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete: A Schema",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topology-schemas/{{namespace}}:campus-schema:1",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topology-schemas",
								"{{namespace}}:campus-schema:1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "topologies-simple",
			"item": [
				{
					"name": "Create: A Topology with content (variable based)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"schemaId\": \"{{namespace}}:campus-schema:1\",\r\n\t\"policyId\": \"{{namespace}}:topologyPolicy\",\r\n\t\"_content\": {\r\n\t\t\"query\": \"mutation ($campus: CampusCreateType) { create(topology: $campus) { campusName } }\",\r\n\t\t\"variables\": {\r\n\t\t\t\"campus\": {\r\n\t\t\t\t\"id\": \"c1\",\r\n\t\t\t\t\"campusName\": \"Berlin\",\r\n\t\t\t\t\"buildings\": [{\r\n\t\t\t\t\t\t\"id\": \"b1\",\r\n\t\t\t\t\t\t\"buildingName\": \"Building 1\",\r\n\t\t\t\t\t\t\"rooms\": [{\r\n\t\t\t\t\t\t\t\t\"id\": \"b1r1\",\r\n\t\t\t\t\t\t\t\t\"roomName\": \"Room 1\",\r\n\t\t\t\t\t\t\t\t\"area\": \"25.5\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}, {\r\n\t\t\t\t\t\t\"id\": \"b2\",\r\n\t\t\t\t\t\t\"buildingName\": \"Building 2\",\r\n\t\t\t\t\t\t\"rooms\": [{\r\n\t\t\t\t\t\t\t\t\"id\": \"b2r1\",\r\n\t\t\t\t\t\t\t\t\"roomName\": \"Room 1\",\r\n\t\t\t\t\t\t\t\t\"area\": \"38.5\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"companies\": [{\r\n\t\t\t\t\t\t\"name\": \"Acme\",\r\n\t\t\t\t\t\t\"units\": [{\r\n\t\t\t\t\t\t\t\t\"id\": \"b1\"\r\n\t\t\t\t\t\t\t}, {\r\n\t\t\t\t\t\t\t\t\"id\": \"b2r1\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topologies/{{namespace}}:campus-1",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topologies",
								"{{namespace}}:campus-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create: A Topology with content",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"schemaId\": \"{{namespace}}:campus-schema:1\",\r\n\t\"policyId\": \"{{namespace}}:topologyPolicy\",\r\n\t\"_content\": {\r\n\t\t\"query\":  \"mutation { create(topology: { id: \\\"c1\\\", campusName: \\\"Berlin\\\", buildings: [{ id: \\\"b1\\\", buildingName: \\\"Building 1\\\", rooms: [{ id: \\\"b1r1\\\", roomName: \\\"Room 1\\\", area: 25.5 } ] }, { id: \\\"b2\\\", buildingName: \\\"Building 2\\\", rooms: [{ id: \\\"b2r1\\\", roomName: \\\"Room 1\\\", area: 38.5 } ] } ], companies: [{ name: \\\"Acme\\\", units: [{ id: \\\"b1\\\" }, { id: \\\"b2r1\\\" } ] } ] }) { campusName } }\"\r\n\t}\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topologies/{{namespace}}:campus-1",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topologies",
								"{{namespace}}:campus-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: A Topology (without content)",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topologies/{{namespace}}:campus-1",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topologies",
								"{{namespace}}:campus-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: A Topology (without content, with fields: topoloyId,_revision)",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topologies/{{namespace}}:campus-1?fields=topologyId,_revision",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topologies",
								"{{namespace}}:campus-1"
							],
							"query": [
								{
									"key": "fields",
									"value": "topologyId,_revision",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: The complete content of a Topology",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\ttopology {\r\n\t\tcampusName,\r\n\t\tbuildings {\r\n\t\t\tbuildingName,\r\n\t\t\trooms {\r\n\t\t\t\troomName\r\n\t\t\t}\r\n\t\t},\r\n\t\tcompanies {\r\n\t\t\tname,\r\n\t\t\tunits {\r\n\t\t\t\tid\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topologies/{{namespace}}:campus-1/content",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topologies",
								"{{namespace}}:campus-1",
								"content"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: All buildings contained in a Topology's content",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topologies/{{namespace}}:campus-1/content?query=%7Btopology%7BcampusName%2Cbuildings%7BbuildingName%7D%7D%7D",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topologies",
								"{{namespace}}:campus-1",
								"content"
							],
							"query": [
								{
									"key": "query",
									"value": "%7Btopology%7BcampusName%2Cbuildings%7BbuildingName%7D%7D%7D",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: Topology content containing referenceables",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\ttopology {\r\n\t\tcompanies {\r\n\t\t\tname,\r\n\t\t\tunits {\r\n\t\t\t\t...on Building {\r\n\t\t\t\t\tid,\r\n\t\t\t\t\tbuildingName\r\n\t\t\t\t}\r\n\t\t\t\t...on Room {\r\n\t\t\t\t\tid,\r\n\t\t\t\t\troomName\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topologies/{{namespace}}:campus-1/content",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topologies",
								"{{namespace}}:campus-1",
								"content"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update: Topology content (application/json) split room",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"query\": \"mutation ($campus: CampusUpdateType) { update(topology: $campus) { campusName, buildings { rooms {roomName, area } } } }\",\r\n\t\"variables\": {\r\n\t\t\"campus\": {\r\n\t\t\t\"id\": \"c1\",\r\n\t\t\t\"campusName\": \"Berlin\",\r\n\t\t\t\"buildings\": [{\r\n\t\t\t\t\t\"id\": \"b1\",\r\n\t\t\t\t\t\"buildingName\": \"Building 1\",\r\n\t\t\t\t\t\"rooms\": [{\r\n\t\t\t\t\t\t\t\"id\": \"b1r1a\",\r\n\t\t\t\t\t\t\t\"roomName\": \"Room 1a\",\r\n\t\t\t\t\t\t\t\"area\": \"15.5\"\r\n\t\t\t\t\t\t}, {\r\n\t\t\t\t\t\t\t\"id\": \"b1r1b\",\r\n\t\t\t\t\t\t\t\"roomName\": \"Room 1b\",\r\n\t\t\t\t\t\t\t\"area\": \"10.0\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topologies/{{namespace}}:campus-1/content",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topologies",
								"{{namespace}}:campus-1",
								"content"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update: Topology content (application/graphql) split room",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n\tupdate(topology: {\r\n\t\tid: \"c1\",\r\n\t\tcampusName: \"Berlin\",\r\n\t\tbuildings: [{\r\n\t\t\t\tid: \"b1\",\r\n\t\t\t\tbuildingName: \"Building 1\",\r\n\t\t\t\trooms: [{\r\n\t\t\t\t\t\tid: \"b1r1a\",\r\n\t\t\t\t\t\troomName: \"Room 1a\",\r\n\t\t\t\t\t\tarea: 15.5\r\n\t\t\t\t\t}, {\r\n\t\t\t\t\t\tid: \"b1r1b\",\r\n\t\t\t\t\t\troomName: \"Room 1b\",\r\n\t\t\t\t\t\tarea: 10\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t]\r\n\t}) {\r\n\t\tcampusName,\r\n\t\tbuildings {\r\n\t\t\trooms {\r\n\t\t\t\troomName,\r\n\t\t\t\tarea\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topologies/{{namespace}}:campus-1/content",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topologies",
								"{{namespace}}:campus-1",
								"content"
							]
						}
					},
					"response": []
				},
				{
					"name": "Archive: A Topology via tag",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topologies/{{namespace}}:campus-1/tags/campusTopology-V1",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topologies",
								"{{namespace}}:campus-1",
								"tags",
								"campusTopology-V1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete: A Topology",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topologies/{{namespace}}:campus-1",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topologies",
								"{{namespace}}:campus-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: Archived Topology content",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\ttopology {\r\n\t\tcampusName,\r\n\t\tbuildings {\r\n\t\t\tbuildingName,\r\n\t\t\trooms {\r\n\t\t\t\troomName\r\n\t\t\t}\r\n\t\t},\r\n\t\tcompanies {\r\n\t\t\tname,\r\n\t\t\tunits {\r\n\t\t\t\tid\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topologies/{{namespace}}:campus-1/content?tag=campusTopology-V1",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topologies",
								"{{namespace}}:campus-1",
								"content"
							],
							"query": [
								{
									"key": "tag",
									"value": "campusTopology-V1",
									"equals": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "topologies-things",
			"item": [
				{
					"name": "Create: An empty Schema with policyId",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"policyId\": \"{{namespace}}:topologyPolicy\"\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topology-schemas/{{namespace}}:campus-schema-remote:1",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topology-schemas",
								"{{namespace}}:campus-schema-remote:1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create: A Schema with remote resource",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "schema @expand(template: \"ResourceAwareTopology\") { query: Ignored }\r\n\r\ntype Campus implements Topology {\r\n\tid: \t\t\tID!\r\n\tcampusName: \tString\r\n\tbuildings: \t\t[Building]\r\n\tcompanies:\t\t[Company]\r\n}\r\n\r\ntype Building implements Referenceable {\r\n\tid:\t\t\t\tID!\r\n\tbuildingName:\tString\r\n\trooms: \t\t\t[Room]\r\n}\r\n\r\ntype Room implements Referenceable {\r\n\tid:\t\t\tID!\r\n\troomName: \tString\r\n\tarea:\t\tFloat\r\n\tlamps: \t\t[Lamp]\r\n}\r\n\r\ntype Company {\r\n\tname:\t\tString\r\n\tunits:\t\t[Referenceable]\r\n}\r\n\r\ninterface LampThing @resource(protocol: \"com.bosch.iot.things:features-protocol:0.0.1\") {\r\n\tid:\t\t\tID!\r\n}\r\n\r\ntype Lamp implements LampThing {\r\n\tid:\t\t\t\t\tID!\t\r\n\tstatus:\t\t\t\tStatus\r\n\tpowerConsumption:\tFloat\r\n}\r\n\r\nenum Status {\r\n\tON\r\n\tOFF\r\n\tBROKEN\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topology-schemas/{{namespace}}:campus-schema-remote:1/content",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topology-schemas",
								"{{namespace}}:campus-schema-remote:1",
								"content"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create: A Thing for a Topology",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"features\": {\n    \"LampFeature\": {\n      \"properties\": {\n        \"status\": \"ON\",\n        \"powerConsumption\": 10.8\n        }\n    }\n  }\n}\n"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/things/{{namespace}}:lamp01",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"things",
								"{{namespace}}:lamp01"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create: A Topology with remote resource",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"schemaId\": \"{{namespace}}:campus-schema-remote:1\",\r\n\t\"policyId\": \"{{namespace}}:topologyPolicy\",\r\n\t\"_content\": {\r\n\t\t\"query\": \"mutation ($campus: CampusCreateType) { create(topology: $campus) }\",\r\n\t\t\"variables\": {\r\n\t\t\t\"campus\": {\r\n\t\t\t\t\"id\": \"c1\",\r\n\t\t\t\t\"campusName\": \"Berlin\",\r\n\t\t\t\t\"buildings\": [{\r\n\t\t\t\t\t\t\"id\": \"b1\",\r\n\t\t\t\t\t\t\"buildingName\": \"Building 1\",\r\n\t\t\t\t\t\t\"rooms\": [{\r\n\t\t\t\t\t\t\t\t\"id\": \"b1r1\",\r\n\t\t\t\t\t\t\t\t\"roomName\": \"Room 1\",\r\n\t\t\t\t\t\t\t\t\"area\": \"25.5\",\r\n\t\t\t\t\t\t\t\t\"lamps\": [{\r\n\t\t\t\t\t\t\t\t\t\t\"id\": \"{{namespace}}:lamp01/LampFeature\"\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topologies/{{namespace}}:campus-1",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topologies",
								"{{namespace}}:campus-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update: A remote resource via Topology",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"query\": \"mutation ($campus: CampusUpdateType) { update(topology: $campus) { outcome, resourceUpdates { id }, resourceFailures { id } } }\",\r\n\t\"variables\": {\r\n\t\t\"campus\": {\r\n\t\t\t\"id\": \"c1\",\r\n\t\t\t\"campusName\": \"Berlin\",\r\n\t\t\t\"buildings\": [{\r\n\t\t\t\t\t\"id\": \"b1\",\r\n\t\t\t\t\t\"buildingName\": \"Building 1\",\r\n\t\t\t\t\t\"rooms\": [{\r\n\t\t\t\t\t\t\t\"id\": \"b1r1\",\r\n\t\t\t\t\t\t\t\"roomName\": \"Room 1\",\r\n\t\t\t\t\t\t\t\"area\": \"25.5\",\r\n\t\t\t\t\t\t\t\"lamps\": {\r\n\t\t\t\t\t\t\t\t\"id\": \"{{namespace}}:lamp01/LampFeature\",\r\n\t\t\t\t\t\t\t\t\"status\": \"ON\",\r\n\t\t\t\t\t\t\t\t\"powerConsumption\": \"150.6\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topologies/{{namespace}}:campus-1/content",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topologies",
								"{{namespace}}:campus-1",
								"content"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update: Remote resources via Things",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"powerConsumption\": 0,\n  \"status\": \"OFF\"\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/things/{{namespace}}:lamp01/features/LampFeature/properties",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"things",
								"{{namespace}}:lamp01",
								"features",
								"LampFeature",
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: A Topology with remote resource",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\ttopology {\r\n\t\tcampusName,\r\n\t\tbuildings {\r\n\t\t\tbuildingName,\r\n\t\t\trooms {\r\n\t\t\t\troomName,\r\n\t\t\t\tlamps {\r\n\t\t\t\t\tid,\r\n\t\t\t\t\tstatus,\r\n\t\t\t\t\tpowerConsumption\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/topologies/{{namespace}}:campus-1/content",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"topologies",
								"{{namespace}}:campus-1",
								"content"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "search-topologies",
			"item": [
				{
					"name": "Query: All Topologies for which I have read permissions ",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/search/topologies",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"search",
								"topologies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query: All Topologies for which I have read permissions  (topologyId)",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base.protocol}}{{base.url}}/api/2/search/topologies?fields=topologyId",
							"host": [
								"{{base.protocol}}{{base.url}}"
							],
							"path": [
								"api",
								"2",
								"search",
								"topologies"
							],
							"query": [
								{
									"key": "fields",
									"value": "topologyId",
									"equals": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}